datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(uuid())
  name          String?
  contact_number String  @unique
  email         String   @unique
  emailVerified DateTime? @map("email_verified")
  password      String
  image_url     String?
  address       String
  bookings      Booking[]

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
}

model Account {
  userId            String @map("user_id")
  type              String
  provider          String
  providerAccountId String @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Cleaner {
  id              String   @id @default(uuid())
  name            String
  home_address    String
  contact_number  String   @unique
  email           String   @unique
  national_id     String   @unique
  country_of_origin String
  image_url       String?
  bookings        Booking[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Booking {
  id                String   @id @default(uuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @map("user_id")
  user_name         String?
  email             String
  contact_number    String
  address           String
  amount            Int
  status            String
  service_date      DateTime
  service_time      DateTime
  cleaner           Cleaner  @relation(fields: [cleanerId], references: [id])
  cleanerId         String @map("cleaner_id")
  bed_rooms         Int
  bath_rooms        Int
  laundry_and_ironing Boolean
  oven              Boolean
  fridge            Boolean
  cabinets          Boolean
  total_hours       Int
 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}